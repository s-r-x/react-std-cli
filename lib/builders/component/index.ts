import { inject, injectable } from 'inversify';
import { TOKENS } from '../../ioc/tokens';
import {
  IModuleExportsBuilder,
  TModuleExportsSpec,
} from '../module-exports/interface';
import {
  IModuleImportsBuilder,
  IModuleImportSpec,
} from '../module-imports/interface';
import { BUILD_COMPONENT_DEFAULT_SPEC } from './constants';
import { IBuildComponentSpec, IComponentBuilder } from './interface';
import { componentTmpl as tmpl } from './template';

@injectable()
export class ComponentBuilder implements IComponentBuilder {
  private spec: IBuildComponentSpec = BUILD_COMPONENT_DEFAULT_SPEC;
  constructor(
    @inject(TOKENS.mdlImprtBldr) private importsBuilder: IModuleImportsBuilder,
    @inject(TOKENS.mdlExprtBldr) private exportsBuilder: IModuleExportsBuilder
  ) {}
  build(spec: IBuildComponentSpec): string {
    this.spec = spec;
    const imports = this.importsBuilder.replaceImports(this.imports).build();
    const exports = this.exportsBuilder.replaceExports(this.exports).build();
    const JSX = this.componentJSX;
    const output = tmpl({
      imports,
      exports,
      JSX,
    });
    return output;
  }

  private get componentJSX(): string {
    const msg = `Generated by react-cli`;
    if (this.spec.styleSpec?.render) {
      return this.spec.styleSpec.render(msg);
    } else {
      return `<div>${msg}</div>`;
    }
  }
  private get imports(): IModuleImportSpec[] {
    return [
      {
        default: 'React',
        from: 'react',
      },
      ...(this.spec.styleSpec?.imports ?? []),
    ];
  }
  private get exports(): TModuleExportsSpec[] {
    return [
      {
        type: 'default',
        name: this.spec.name,
        hocs: this.hocs,
      },
    ];
  }
  private get hocs(): string[] {
    return [
      this.spec.useRedux && 'connect(state => ({}))',
      ...(this.spec.styleSpec?.hocs ?? []),
    ].filter(Boolean) as string[];
  }
}
